name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  PYTHON_VERSION: '3.10'
  
jobs:
  # CI Îã®Í≥Ñ: ÌÖåÏä§Ìä∏Îßå (ÌòÑÏû¨ ÌôúÏÑ±Ìôî)
  test:
    name: üß™ Test & Quality Check
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: üì• ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ
      uses: actions/checkout@v4

    - name: üêç Python ÌôòÍ≤Ω ÏÑ§Ï†ï
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: üì¶ ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # üîç ÏΩîÎìú Ïä§ÌÉÄÏùº Í≤ÄÏÇ¨ (ÌïÑÏöîÏãú ÌôúÏÑ±Ìôî)
    # - name: üîç ÏΩîÎìú Ïä§ÌÉÄÏùº Í≤ÄÏÇ¨ (flake8)
    #   run: |
    #     pip install flake8
    #     # Í∏∞Î≥∏ Ïä§ÌÉÄÏùº Í≤ÄÏÇ¨ (ÎùºÏù∏ Í∏∏Ïù¥ 88Ïûê, ÏùºÎ∂Ä Ïò§Î•ò Î¨¥Ïãú)
    #     flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
    #     flake8 app/ --count --max-line-length=88 --statistics

    - name: üß™ ÌÖåÏä§Ìä∏ Ïã§Ìñâ (ÌïµÏã¨ API ÏóîÎìúÌè¨Ïù∏Ìä∏)
      env:
        # ÌÖåÏä§Ìä∏Ïö© ÌôòÍ≤ΩÎ≥ÄÏàò
        ENVIRONMENT: test
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        REDIS_URL: redis://localhost:6379
      run: |
        # ÌïµÏã¨ ÌÖåÏä§Ìä∏Îßå Ïã§Ìñâ (86Í∞ú ÌÖåÏä§Ìä∏ ÌÜµÍ≥º Í∏∞Ï§Ä)
        python -m pytest tests/test_api/ -v --tb=short
        # Notion webhook ÌÖåÏä§Ìä∏ Î≥ÑÎèÑ Ïã§Ìñâ (Ï§ëÏöî)
        python -m pytest tests/test_api/notion_webhook_test.py -v
        echo "‚úÖ ÌïµÏã¨ API ÌÖåÏä§Ìä∏ ÏôÑÎ£å"
        
    - name: üìä ÌÖåÏä§Ìä∏ Ïª§Î≤ÑÎ¶¨ÏßÄ Î≥¥Í≥†ÏÑú
      run: |
        pip install pytest-cov
        python -m pytest tests/test_api/ --cov=app --cov-report=xml --cov-report=term

    - name: üê≥ Docker Compose Ï†ÑÏ≤¥ Ïä§ÌÉù ÌÖåÏä§Ìä∏
      env:
        REDIS_PASSWORD: test_password
        SUPABASE_URL: ${{ secrets.SUPABASE_URL || 'http://localhost:54321' }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY || 'test-service-key' }}
        OPENAI_API_KEY: test_key
        ANTHROPIC_API_KEY: test_key
      run: |
        # docker composeÎ°ú Ï†ÑÏ≤¥ Ïä§ÌÉù ÎπåÎìú Î∞è Ïã§Ìñâ ÌÖåÏä§Ìä∏
        if [ -f docker-compose.yml ]; then
          echo "üöÄ Docker Compose Ïä§ÌÉù ÏãúÏûë..."
          
          # Í∏∞Ï°¥ Ïª®ÌÖåÏù¥ÎÑà Ï†ïÎ¶¨
          docker compose down -v || true
          
          # Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú ÏÑúÎπÑÏä§ ÏãúÏûë
          echo "üì¶ Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è ÏÑúÎπÑÏä§ ÏãúÏûë..."
          docker compose up -d --build
          
          # ÏÑúÎπÑÏä§Îì§Ïù¥ Ï§ÄÎπÑÎê† ÎïåÍπåÏßÄ ÎåÄÍ∏∞
          echo "‚è≥ ÏÑúÎπÑÏä§ Ï§ÄÎπÑ ÎåÄÍ∏∞ Ï§ë..."
          sleep 45
          
          # Ïª®ÌÖåÏù¥ÎÑà ÏÉÅÌÉú ÌôïÏù∏
          echo "üîç Ïª®ÌÖåÏù¥ÎÑà ÏÉÅÌÉú ÌôïÏù∏..."
          docker compose ps
          
          # FastAPI Ìó¨Ïä§Ï≤¥ÌÅ¨ (Ìè¨Ìä∏ Ï∂©Îèå Í∞ÄÎä•ÏÑ±ÏúºÎ°ú Í∏∞Î≥∏ Ï≤¥ÌÅ¨Îßå)
          echo "üè• FastAPI ÏÑúÎπÑÏä§ Ï≤¥ÌÅ¨..."
          if docker compose ps fastapi | grep -q "Up"; then
            echo "‚úÖ FastAPI Ïª®ÌÖåÏù¥ÎÑà Ï†ïÏÉÅ Ïã§Ìñâ Ï§ë"
          else
            echo "‚ùå FastAPI Ïª®ÌÖåÏù¥ÎÑà Ïã§Ìñâ Ïã§Ìå®"
            docker compose logs fastapi
            exit 1
          fi
          
          # Redis Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ (Ìè¨Ìä∏ 9091 ÏÇ¨Ïö©)
          echo "üè• Redis ÏÑúÎπÑÏä§ Ï≤¥ÌÅ¨..."
          if docker compose exec -T redis redis-cli -p 9091 -a test_password ping > /dev/null 2>&1; then
            echo "‚úÖ Redis ÏÑúÎπÑÏä§ Ï†ïÏÉÅ"
          else
            echo "‚ùå Redis ÏÑúÎπÑÏä§ Ïã§Ìå®" 
            docker compose logs redis
            exit 1
          fi
          
          # ÏÑúÎπÑÏä§ Ï†ïÎ¶¨
          docker compose down -v
          echo "‚úÖ Docker Compose Ïä§ÌÉù ÌÖåÏä§Ìä∏ ÏôÑÎ£å"
        else
          echo "‚ö†Ô∏è docker-compose.yml ÏóÜÏùå - Ïä§ÌÇµ"
        fi

# üöÄ Î∞∞Ìè¨ Í¥ÄÎ†® ÏÑπÏÖò (ÎÇòÏ§ëÏóê ÌïÑÏöîÏãú ÌôúÏÑ±Ìôî)
# 
# jobs:
#   deploy:
#     name: üöÄ ÏûêÎèô Î∞∞Ìè¨ & Ïû¨ÏãúÏûë
#     needs: test
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#     
#     steps:
#     - name: üì• ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ
#       uses: actions/checkout@v4
#       
#     - name: üê≥ Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú & ÌÉúÍπÖ
#       run: |
#         VERSION_TAG=${GITHUB_SHA::8}-$(date +%Y%m%d%H%M)
#         docker build -t notion-lms:$VERSION_TAG .
#         docker tag notion-lms:$VERSION_TAG notion-lms:latest
#         echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
#
#     - name: üîÑ ÏÑúÎ≤Ñ Î∞∞Ìè¨
#       uses: appleboy/ssh-action@v1.0.0
#       with:
#         host: ${{ secrets.DEPLOY_HOST }}
#         username: ${{ secrets.DEPLOY_USER }}
#         key: ${{ secrets.DEPLOY_SSH_KEY }}
#         script: |
#           docker pull notion-lms:latest
#           docker stop notion-lms || true
#           docker rm notion-lms || true
#           docker run -d --name notion-lms -p 8000:8000 notion-lms:latest 